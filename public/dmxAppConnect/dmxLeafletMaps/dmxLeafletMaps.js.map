{"version":3,"sources":["core/leafletProviders.js","components/leafletMap.js","components/leafletMarker.js"],"names":["LEAFLET_PROVIDERS","Map","urlTemplate","attribution","maxZoom","dmx","Component","initialData","latitude","longitude","zoom","attributes","preferCanvas","type","Boolean","default","layerControl","attributionControl","zoomControl","zoomControlPosition","String","enum","scaleControl","scaleControlPosition","scaleControlMetric","scaleControlImperial","Number","zoomDelta","keyboard","scrollWheelZoom","doubleClickZoom","touchZoom","undefined","tileProvider","enableClustering","markers","Array","markerId","markerLatitude","markerLongitude","markerTooltip","markerPopup","markerGroup","markerDraggable","markerIcon","markerIconUrl","markerColor","methods","setView","lat","lng","this","map","setZoom","zoomIn","zoomOut","fitBounds","bounds","fitWorld","panTo","panBy","x","y","flyTo","flyToBounds","setMaxBounds","setMinZoom","setMaxZoom","panInsideBounds","panInside","invalidateSize","animate","stop","openPopup","content","options","L","popup","setLatLng","setContent","openOn","addMarker","id","removeMarker","filter","marker","remove","off","removeAllMarkers","_removeAllMarkers","openMarkerPopup","findMarker","closeMarkerPopup","closePopup","toggleMarkerPopup","togglePopup","fitMarkers","latLngBounds","forEach","extend","getLatLng","events","zoomstart","Event","zoomend","movestart","move","moveend","popupopen","popupclose","tooltipopen","tooltipclose","mapclick","mapdblclick","markerclick","markerdblclick","markermove","init","document","getElementById","css","createElement","textContent","head","appendChild","render","node","$parse","props","center","_toBooleanOrString","baseLayers","overlays","tileMinZoom","minZoom","tileMaxZoom","tileSubdomains","subdomains","tileAttribution","tileLayer","tileUrl","addTo","get","_tileLayer","children","child","push","_marker","addMarkerToMap","group","control","layers","position","scale","metric","imperial","on","onEvent","bind","onMouseEvent","_updateData","performUpdate","updatedProps","has","setPosition","isArray","scope","DataScope","parse","tooltip","draggable","icon","iconUrl","color","find","markerClusterGroup","layerGroup","addOverlay","_markerCluster","addLayer","markerOptions","Icon","divIcon","className","iconSize","iconAnchor","tooltipAnchor","popupAnchor","html","Default","static","bindTooltip","bindPopup","onMoveEvent","getCenter","getZoom","set","o","allowed","includes","e","dispatchEvent","data","prefix","latlng","oldLatitude","oldLatLng","oldLongitude","target","altKey","originalEvent","ctrlKey","metaKey","shiftKey","pageX","pageY","clientX","clientY","click","dblclick","_clickHandler","_moveHandler","name","_hasTooltip","_hasPopup","unbindTooltip","unbindPopup","dragging","setIcon","destroy","clearAllEventListeners","coor"],"mappings":"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","file":"dmxLeafletMaps.js","sourcesContent":["const LEAFLET_PROVIDERS = new Map([\r\n  [\r\n    'OpenStreetMap',\r\n    {\r\n      urlTemplate: 'https://tile.openstreetmap.org/{z}/{x}/{y}.png',\r\n      attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors',\r\n      maxZoom: 19,\r\n    },\r\n  ],\r\n  [\r\n    'OpenStreetMap DE',\r\n    {\r\n      urlTemplate: 'https://{s}.tile.openstreetmap.de/tiles/osmde/{z}/{x}/{y}.png',\r\n      attribution: '&copy; <a href=\"https://www.openstreetmap.de/karte.html\">OpenStreetMap DE</a> contributors',\r\n      maxZoom: 18,\r\n    },\r\n  ],\r\n  [\r\n    'OpenStreetMap FR',\r\n    {\r\n      urlTemplate: 'https://{s}.tile.openstreetmap.fr/osmfr/{z}/{x}/{y}.png',\r\n      attribution: '&copy; OpenStreetMap France | &copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors',\r\n      maxZoom: 20,\r\n    },\r\n  ],\r\n  [\r\n    'OpenStreetMap HOT',\r\n    {\r\n      urlTemplate: 'https://{s}.tile.openstreetmap.fr/hot/{z}/{x}/{y}.png',\r\n      attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors, Tiles style by <a href=\"https://www.hotosm.org/\" target=\"_blank\">Humanitarian OpenStreetMap Team</a> hosted by <a href=\"https://openstreetmap.fr/\" target=\"_blank\">OpenStreetMap France</a>',\r\n      maxZoom: 19,\r\n    },\r\n  ],\r\n  [\r\n    'OpenTopoMap',\r\n    {\r\n      urlTemplate: 'https://{s}.tile.opentopomap.org/{z}/{x}/{y}.png',\r\n      attribution: 'Map data: {attribution.OpenStreetMap}, <a href=\"http://viewfinderpanoramas.org\">SRTM</a> | Map style: &copy; <a href=\"https://opentopomap.org\">OpenTopoMap</a> (<a href=\"https://creativecommons.org/licenses/by-sa/3.0/\">CC-BY-SA</a>)',\r\n      maxZoom: 17,\r\n    },\r\n  ],\r\n  [\r\n    'Stadia Alidade Smooth',\r\n    {\r\n      urlTemplate: 'https://tiles.stadiamaps.com/tiles/alidade_smooth/{z}/{x}/{y}{r}.png',\r\n      attribution: '&copy; <a href=\"https://stadiamaps.com/\" target=\"_blank\">Stadia Maps</a> &copy; <a href=\"https://openmaptiles.org/\" target=\"_blank\">OpenMapTiles</a> &copy; <a href=\"https://www.openstreetmap.org/copyright\" target=\"_blank\">OpenStreetMap</a>',\r\n      maxZoom: 20,\r\n    },\r\n  ],\r\n  [\r\n    'Stadia Alidade Smooth Dark',\r\n    {\r\n      urlTemplate: 'https://tiles.stadiamaps.com/tiles/alidade_smooth_dark/{z}/{x}/{y}{r}.png',\r\n      attribution: '&copy; <a href=\"https://stadiamaps.com/\" target=\"_blank\">Stadia Maps</a> &copy; <a href=\"https://openmaptiles.org/\" target=\"_blank\">OpenMapTiles</a> &copy; <a href=\"https://www.openstreetmap.org/copyright\" target=\"_blank\">OpenStreetMap</a>',\r\n      maxZoom: 20,\r\n    },\r\n  ],\r\n  [\r\n    'Stadia Outdoors',\r\n    {\r\n      urlTemplate: 'https://tiles.stadiamaps.com/tiles/outdoors/{z}/{x}/{y}{r}.png',\r\n      attribution: '&copy; <a href=\"https://stadiamaps.com/\" target=\"_blank\">Stadia Maps</a> &copy; <a href=\"https://openmaptiles.org/\" target=\"_blank\">OpenMapTiles</a> &copy; <a href=\"https://www.openstreetmap.org/copyright\" target=\"_blank\">OpenStreetMap</a>',\r\n      maxZoom: 20,\r\n    },\r\n  ],\r\n  [\r\n    'Stadia Stamen Toner',\r\n    {\r\n      urlTemplate: 'https://tiles.stadiamaps.com/tiles/stamen_toner/{z}/{x}/{y}{r}.png',\r\n      attribution: '&copy; <a href=\"https://stadiamaps.com/\" target=\"_blank\">Stadia Maps</a> &copy; <a href=\"https://stamen.com/\" target=\"_blank\">Stamen Design</a> &copy; <a href=\"https://openmaptiles.org/\" target=\"_blank\">OpenMapTiles</a> &copy; <a href=\"https://www.openstreetmap.org/copyright\" target=\"_blank\">OpenStreetMap</a>',\r\n      maxZoom: 20,\r\n    },\r\n  ],\r\n  [\r\n    'Stadia Stamen Toner Lite',\r\n    {\r\n      urlTemplate: 'https://tiles.stadiamaps.com/tiles/stamen_toner_lite/{z}/{x}/{y}{r}.png',\r\n      attribution: '&copy; <a href=\"https://stadiamaps.com/\" target=\"_blank\">Stadia Maps</a> &copy; <a href=\"https://stamen.com/\" target=\"_blank\">Stamen Design</a> &copy; <a href=\"https://openmaptiles.org/\" target=\"_blank\">OpenMapTiles</a> &copy; <a href=\"https://www.openstreetmap.org/copyright\" target=\"_blank\">OpenStreetMap</a>',\r\n      maxZoom: 20,\r\n    },\r\n  ],\r\n  [\r\n    'Stadia Stamen Watercolor',\r\n    {\r\n      urlTemplate: 'https://tiles.stadiamaps.com/tiles/stamen_watercolor/{z}/{x}/{y}.jpg',\r\n      attribution: '&copy; <a href=\"https://stadiamaps.com/\" target=\"_blank\">Stadia Maps</a> &copy; <a href=\"https://stamen.com/\" target=\"_blank\">Stamen Design</a> &copy; <a href=\"https://www.openstreetmap.org/copyright\" target=\"_blank\">OpenStreetMap</a>',\r\n      maxZoom: 16,\r\n    },\r\n  ],\r\n  [\r\n    'Stadia Stamen Terrain',\r\n    {\r\n      urlTemplate: 'https://tiles.stadiamaps.com/tiles/stamen_terrain/{z}/{x}/{y}{r}.png',\r\n      attribution: '&copy; <a href=\"https://stadiamaps.com/\" target=\"_blank\">Stadia Maps</a> &copy; <a href=\"https://stamen.com/\" target=\"_blank\">Stamen Design</a> &copy; <a href=\"https://openmaptiles.org/\" target=\"_blank\">OpenMapTiles</a> &copy; <a href=\"https://www.openstreetmap.org/copyright\" target=\"_blank\">OpenStreetMap</a>',\r\n      maxZoom: 20,\r\n    },\r\n  ],\r\n  [\r\n    'Stadia OSM Bright',\r\n    {\r\n      urlTemplate: 'https://tiles.stadiamaps.com/tiles/osm_bright/{z}/{x}/{y}{r}.png',\r\n      attribution: '&copy; <a href=\"https://stadiamaps.com/\" target=\"_blank\">Stadia Maps</a> &copy; <a href=\"https://openmaptiles.org/\" target=\"_blank\">OpenMapTiles</a> &copy; <a href=\"https://www.openstreetmap.org/copyright\" target=\"_blank\">OpenStreetMap</a>',\r\n      maxZoom: 20,\r\n    },\r\n  ],\r\n]);","dmx.Component('leaflet-map', {\r\n\r\n  initialData: {\r\n    latitude: null,\r\n    longitude: null,\r\n    zoom: null,\r\n  },\r\n\r\n  attributes: {\r\n    preferCanvas: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n\r\n    layerControl: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n\r\n    attributionControl: {\r\n      type: Boolean,\r\n      default: true,\r\n    },\r\n\r\n    zoomControl: {\r\n      type: Boolean,\r\n      default: true,\r\n    },\r\n\r\n    zoomControlPosition: {\r\n      type: String,\r\n      default: 'topleft',\r\n      enum: ['topleft', 'topright', 'bottomleft', 'bottomright'],\r\n    },\r\n\r\n    scaleControl: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n\r\n    scaleControlPosition: {\r\n      type: String,\r\n      default: 'bottomleft',\r\n      enum: ['topleft', 'topright', 'bottomleft', 'bottomright'],\r\n    },\r\n\r\n    scaleControlMetric: {\r\n      type: Boolean,\r\n      default: true,\r\n    },\r\n\r\n    scaleControlImperial: {\r\n      type: Boolean,\r\n      default: true,\r\n    },\r\n\r\n    latitude: {\r\n      type: Number,\r\n      default: 0,\r\n    },\r\n\r\n    longitude: {\r\n      type: Number,\r\n      default: 0,\r\n    },\r\n\r\n    zoom: {\r\n      type: Number,\r\n      default: 1,\r\n    },\r\n\r\n    zoomDelta: {\r\n      type: Number,\r\n      default: 1,\r\n    },\r\n\r\n    keyboard: {\r\n      type: Boolean,\r\n      default: true,\r\n    },\r\n\r\n    scrollWheelZoom: {\r\n      type: String,\r\n      default: true,\r\n      enum: ['true', 'false', 'center'],\r\n    },\r\n\r\n    doubleClickZoom: {\r\n      type: String,\r\n      default: 'true',\r\n      enum: ['true', 'false', 'center'],\r\n    },\r\n\r\n    touchZoom: {\r\n      type: String,\r\n      default: undefined,\r\n      enum: ['true', 'false', 'center'],\r\n    },\r\n\r\n    tileProvider: {\r\n      type: String,\r\n      default: 'OpenStreetMap',\r\n    },\r\n\r\n    enableClustering: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n\r\n    markers: {\r\n      type: Array,\r\n      default: undefined,\r\n    },\r\n\r\n    markerId: {\r\n      type: String, // expression\r\n      default: 'id',\r\n    },\r\n\r\n    markerLatitude: {\r\n      type: String, // expression\r\n      default: 'latitude',\r\n    },\r\n\r\n    markerLongitude: {\r\n      type: String, // expression\r\n      default: 'longitude',\r\n    },\r\n\r\n    markerTooltip: {\r\n      type: String, // expression\r\n      default: 'tooltip',\r\n    },\r\n\r\n    markerPopup: {\r\n      type: String, // expression\r\n      default: 'popup',\r\n    },\r\n\r\n    markerGroup: {\r\n      type: String, // expression\r\n      default: 'group',\r\n    },\r\n\r\n    markerDraggable: {\r\n      type: String, // expression\r\n      default: 'draggable',\r\n    },\r\n\r\n    markerIcon: {\r\n      type: String, // expression\r\n      default: 'icon',\r\n    },\r\n\r\n    markerIconUrl: {\r\n      type: String, // expression\r\n      default: 'iconUrl',\r\n    },\r\n\r\n    markerColor: {\r\n      type: String, // expression\r\n      default: 'color',\r\n    },\r\n  },\r\n\r\n  methods: {\r\n    setView (lat, lng, zoom) {\r\n      // Sets the view of the map (geographical center and zoom) with the given animation options.\r\n      // setView(<LatLng> center, <Number> zoom, <Zoom/pan options> options?)\r\n      this.map.setView([+lat, +lng], zoom);\r\n    },\r\n\r\n    setZoom (zoom) {\r\n      // Sets the zoom of the map.\r\n      // setZoom(<Number> zoom, <Zoom/pan options> options?)\r\n      this.map.setZoom(zoom);\r\n    },\r\n\r\n    zoomIn () {\r\n      // Increases the zoom of the map by delta (zoomDelta by default).\r\n      // zoomIn(<Number> delta?, <Zoom options> options?)\r\n      this.map.zoomIn();\r\n    },\r\n\r\n    zoomOut () {\r\n      // Decreases the zoom of the map by delta (zoomDelta by default).\r\n      // zoomOut(<Number> delta?, <Zoom options> options?)\r\n      this.map.zoomOut();\r\n    },\r\n\r\n    fitBounds (bounds) {\r\n      // Sets a map view that contains the given geographical bounds with the maximum zoom level possible.\r\n      // fitBounds(<LatLngBounds> bounds, <fitBounds options> options?)\r\n      this.map.fitBounds(bounds);\r\n    },\r\n\r\n    fitWorld () {\r\n      // Sets a map view that mostly contains the whole world with the maximum zoom level possible.\r\n      // fitWorld(<fitBounds options> options?)\r\n      this.map.fitWorld();\r\n    },\r\n\r\n    panTo (lat, lng) {\r\n      // Pans the map to a given center.\r\n      // panTo(<LatLng> latlng, <Pan options> options?)\r\n      this.map.panTo([+lat, +lng]);\r\n    },\r\n\r\n    panBy (x, y) {\r\n      // Pans the map by a given number of pixels (animated).\r\n      // panBy(<Point> offset, <Pan options> options?)\r\n      this.map.panBy([x, y]);\r\n    },\r\n\r\n    flyTo (lat, lng, zoom) {\r\n      // Sets the view of the map (geographical center and zoom) performing a smooth pan-zoom animation.\r\n      // flyTo(<LatLng> latlng, <Number> zoom?, <Zoom/pan options> options?)\r\n      this.map.flyTo([+lat, +lng], zoom);\r\n    },\r\n\r\n    flyToBounds (bounds) {\r\n      // Sets the view of the map with a smooth animation like flyTo, but takes a bounds parameter like fitBounds.\r\n      // flyToBounds(<LatLngBounds> bounds, <fitBounds options> options?)\r\n      this.map.flyToBounds(bounds);\r\n    },\r\n\r\n    setMaxBounds (bounds) {\r\n      // Restricts the map view to the given bounds (see the maxBounds option).\r\n      // setMaxBounds(<LatLngBounds> bounds)\t\r\n      this.map.setMaxBounds(bounds);\r\n    },\r\n\r\n    setMinZoom (zoom) {\r\n      // Sets the lower limit for the available zoom levels (see the minZoom option).\r\n      // setMinZoom(<Number> zoom)\r\n      this.map.setMinZoom(zoom);\r\n    },\r\n\r\n    setMaxZoom (zoom) {\r\n      // Sets the upper limit for the available zoom levels (see the maxZoom option).\r\n      // setMaxZoom(<Number> zoom)\r\n      this.map.setMaxZoom(zoom);\r\n    },\r\n\r\n    panInsideBounds (bounds) {\r\n      // Pans the map to the closest view that would lie inside the given bounds (if it's not already), controlling the animation using the options specific, if any.\r\n      // panInsideBounds(<LatLngBounds> bounds, <Pan options> options?)\r\n      this.map.panInsideBounds(bounds);\r\n    },\r\n\r\n    panInside (lat, lng) {\r\n      // Pans the map the minimum amount to make the latlng visible. Use padding options to fit the display to more restricted bounds. If latlng is already within the (optionally padded) display bounds, the map will not be panned.\r\n      // panInside(<LatLng> latlng, <padding options> options?)\r\n      this.map.panInside([+lat, +lng]);\r\n    },\r\n\r\n    invalidateSize (animate = true) {\r\n      // Checks if the map container size changed and updates the map if so — call it after you've changed the map size dynamically, also animating pan by default.\r\n      // invalidateSize(<Boolean> animate)\r\n      this.map.invalidateSize(animate);\r\n    },\r\n\r\n    stop () {\r\n      // Stops the currently running panTo or flyTo animation, if any.\r\n      // stop()      \r\n      this.map.stop();\r\n    },\r\n\r\n    openPopup (lat, lng, content, options = {}) {\r\n      L.popup(options).setLatLng([+lat, +lng]).setContent(content).openOn(this.map);\r\n    },\r\n\r\n    addMarker (id, lat, lng, options = {}) {\r\n      options.id = id;\r\n      options.latitude = lat;\r\n      options.longitude = lng;\r\n      this.addMarker(options);\r\n    },\r\n\r\n    removeMarker (id) {\r\n      this.markers = this.markers.filter(function (marker) {\r\n        if (marker.id == id) {\r\n          marker.remove().off();\r\n          return false;\r\n        }\r\n\r\n        return true;\r\n      })\r\n    },\r\n\r\n    // remove all dynamic markers\r\n    removeAllMarkers () {\r\n      this._removeAllMarkers();\r\n    },\r\n\r\n    openMarkerPopup (id) {\r\n      var marker = this.findMarker(id);\r\n      if (marker) marker.openPopup();\r\n    },\r\n\r\n    closeMarkerPopup (id) {\r\n      var marker = this.findMarker(id);\r\n      if (marker) marker.closePopup();\r\n    },\r\n\r\n    toggleMarkerPopup (id) {\r\n      var marker = this.findMarker(id);\r\n      if (marker) marker.togglePopup();\r\n    },\r\n\r\n    fitMarkers () {\r\n      var bounds = L.latLngBounds();\r\n      this.markers.forEach(marker => bounds.extend(marker.getLatLng()));\r\n      this.map.fitBounds(bounds);\r\n    },\r\n  },\r\n\r\n  events: {\r\n    zoomstart: Event,\r\n    zoom: Event,\r\n    zoomend: Event,\r\n    movestart: Event,\r\n    move: Event,\r\n    moveend: Event,\r\n    popupopen: Event,\r\n    popupclose: Event,\r\n    tooltipopen: Event,\r\n    tooltipclose: Event,\r\n    mapclick: Event,\r\n    mapdblclick: Event,\r\n    markerclick: Event,\r\n    markerdblclick: Event,\r\n    markermove: Event,\r\n  },\r\n\r\n  init () {\r\n    if (!document.getElementById('leaflet-styles')) {\r\n      const css = document.createElement('style');\r\n      css.id = 'leaflet-styles';\r\n      css.textContent = `\r\n        .leaflet-marker-icon-pink {\r\n          filter: hue-rotate(120deg);\r\n        }\r\n        .leaflet-marker-icon-darkblue {\r\n          filter: hue-rotate(30deg);\r\n        }\r\n        .leaflet-marker-icon-lila {\r\n          filter: hue-rotate(50deg);\r\n        }\r\n        .leaflet-marker-icon-magenta {\r\n          filter: hue-rotate(90deg);\r\n        }\r\n        .leaflet-marker-icon-red {\r\n          filter: hue-rotate(140deg);\r\n        }\r\n        .leaflet-marker-icon-orange {\r\n          filter: hue-rotate(160deg);\r\n        }\r\n        .leaflet-marker-icon-brown {\r\n          filter: hue-rotate(190deg);\r\n        }\r\n        .leaflet-marker-icon-green {\r\n          filter: hue-rotate(260deg);\r\n        }\r\n        .leaflet-marker-icon-mint {\r\n          filter: hue-rotate(320deg);\r\n        }\r\n        .leaflet-marker-icon-custom {\r\n          width: 25px;\r\n          height: 25px;\r\n          color: #fff;\r\n          text-align: center;\r\n          line-height: 25px;\r\n          position: relative;\r\n          font-size: var(--icon-size);\r\n          text-shadow: 0 1px 0 rgba(0, 0, 0, 0.2);\r\n        }\r\n        .leaflet-marker-icon-custom > * {\r\n            position: relative;\r\n        }\r\n        .leaflet-marker-icon-custom::before {\r\n            content: '';\r\n            position: absolute;\r\n            top: 0;\r\n            left: 0;\r\n            width: 25px;\r\n            height: 25px;\r\n            background: linear-gradient(135deg, #4c9cd1, #126fc6);\r\n            background-color: #126fc6;\r\n            box-sizing: border-box;\r\n            border: 1px solid rgba(0, 0, 0, 0.2);\r\n            border-radius: 50% 50% 0 50%;\r\n            transform: rotate(45deg);\r\n        }\r\n      `;\r\n      document.head.appendChild(css);\r\n    }\r\n  },\r\n\r\n  render (node) {\r\n    this.$parse(node);\r\n\r\n    node.textContent = '';\r\n\r\n    this.map = L.map(node, {\r\n      preferCanvas: this.props.preferCanvas,\r\n      attributionControl: this.props.attributionControl,\r\n      zoomControl: false,\r\n      center: [this.props.latitude, this.props.longitude],\r\n      zoom: this.props.zoom,\r\n      keyboard: this.props.keyboard,\r\n      scrollWheelZoom: this._toBooleanOrString(this.props.scrollWheelZoom, ['center']),\r\n      doubleClickZoom: this._toBooleanOrString(this.props.doubleClickZoom, ['center']),\r\n      touchZoom: this._toBooleanOrString(this.props.touchZoom, ['center']),\r\n    });\r\n\r\n    if (node.id) {\r\n      this.map.id = node.id;\r\n    }\r\n\r\n    this.baseLayers = {};\r\n    this.overlays = {};\r\n    this.markers = [];\r\n\r\n    if (this.props.tileProvider == 'custom') {\r\n      var options = {};\r\n      if (this.props.tileMinZoom) options.minZoom = this.props.tileMinZoom;\r\n      if (this.props.tileMaxZoom) options.maxZoom = this.props.tileMaxZoom;\r\n      if (this.props.tileSubdomains) options.subdomains = this.props.tileSubdomains;\r\n      if (this.props.tileAttribution) options.attribution = this.props.tileAttribution;\r\n      L.tileLayer(this.props.tileUrl, options).addTo(this.map);\r\n    } else {\r\n      var tileProvider = LEAFLET_PROVIDERS.get(this.props.tileProvider) || LEAFLET_PROVIDERS.get('OpenStreetMap');\r\n      this._tileLayer = L.tileLayer(tileProvider.urlTemplate, tileProvider).addTo(this.map);\r\n    }\r\n\r\n    this.children.forEach((child) => {\r\n      if (child instanceof dmx.Component('leaflet-marker')) {\r\n        this.markers.push(child._marker);\r\n        this.addMarkerToMap(child._marker, child.props.group);\r\n      }\r\n    });\r\n\r\n    if (this.props.layerControl) {\r\n      this.layerControl = L.control.layers(this.baseLayers, this.overlays).addTo(this.map);\r\n    }\r\n\r\n    if (this.props.zoomControl) {\r\n      this.zoomControl = L.control.zoom({ position: this.props.zoomControlPosition }).addTo(this.map);\r\n    }\r\n\r\n    if (this.props.scaleControl) {\r\n      this.scaleControl = L.control.scale({\r\n          position: this.props.scaleControlPosition,\r\n          metric: this.props.scaleControlMetric,\r\n          imperial: this.props.scaleControlImperial,\r\n        }).addTo(this.map);\r\n    }\r\n\r\n    this.map.on('zoomlevelschange', this.onEvent.bind(this));\r\n    this.map.on('zoomstart', this.onEvent.bind(this));\r\n    this.map.on('zoom', this.onEvent.bind(this));\r\n    this.map.on('zoomend', this.onEvent.bind(this));\r\n    this.map.on('movestart', this.onEvent.bind(this));\r\n    this.map.on('move', this.onEvent.bind(this));\r\n    this.map.on('moveend', this.onEvent.bind(this));\r\n\r\n    this.map.on('click', this.onMouseEvent.bind(this, 'map'));\r\n    this.map.on('dblclick', this.onMouseEvent.bind(this, 'map'));\r\n\r\n    this._updateData();\r\n  },\r\n\r\n  performUpdate (updatedProps) {\r\n    if (updatedProps.has('latitude') || updatedProps.has('longitude')) {\r\n      this.map.setView([this.props.latitude, this.props.longitude], this.props.zoom, { animate: false });\r\n    }\r\n\r\n    if (updatedProps.has('zoom')) {\r\n      this.map.setZoom(this.props.zoom, { animate: false });\r\n    }\r\n\r\n    if (updatedProps.has('zoomControl')) {\r\n      if (this.zoomControl) {\r\n        this.zoomControl.remove();\r\n        this.zoomControl = null;\r\n      }\r\n\r\n      if (this.props.zoomControl) {\r\n        this.zoomControl = L.control.zoom({\r\n          position: this.props.zoomControlPosition,\r\n        }).addTo(this.map);\r\n      }\r\n    } else if (this.zoomControl && updatedProps.has('zoomControlPosition')) {\r\n      this.zoomControl.setPosition(this.props.zoomControlPosition);\r\n    }\r\n\r\n    if (updatedProps.has('scaleControl') || updatedProps.has('scaleControlMetric') || updatedProps.has('scaleControlImperial')) {\r\n      if (this.scaleControl) {\r\n        this.scaleControl.remove();\r\n        this.scaleControl = null;\r\n      }\r\n\r\n      if (this.props.scaleControl) {\r\n        this.scaleControl = L.control.scale({\r\n          position: this.props.scaleControlPosition,\r\n          metric: this.props.scaleControlMetric,\r\n          imperial: this.props.scaleControlImperial,\r\n        }).addTo(this.map);\r\n      }\r\n    } else if (this.scaleControl && updatedProps.has('scaleControlPosition')) {\r\n      this.scaleControl.setPosition(this.props.scaleControlPosition);\r\n    }\r\n\r\n    if (updatedProps.has('markers')) {\r\n      this._removeAllMarkers();\r\n\r\n      if (Array.isArray(this.props.markers)) {\r\n        this.props.markers.forEach(marker => {\r\n          var scope = new dmx.DataScope(marker, this);\r\n\r\n          this.addMarker({\r\n            id: dmx.parse(this.props.markerId, scope),\r\n            latitude: +dmx.parse(this.props.markerLatitude, scope),\r\n            longitude: +dmx.parse(this.props.markerLongitude, scope),\r\n            tooltip: dmx.parse(this.props.markerTooltip, scope),\r\n            popup: dmx.parse(this.props.markerPopup, scope),\r\n            group: dmx.parse(this.props.markerGroup, scope),\r\n            draggable: !!dmx.parse(this.props.markerDraggable, scope),\r\n            icon: dmx.parse(this.props.markerIcon, scope),\r\n            iconUrl: dmx.parse(this.props.markerIconUrl, scope),\r\n            color: dmx.parse(this.props.markerColor, scope),\r\n          });\r\n        });\r\n      }\r\n    }\r\n\r\n    if (updatedProps.has('tileProvider')) {\r\n      if (this._tileLayer) {\r\n        this._tileLayer.remove();\r\n        this._tileLayer = null;\r\n      }\r\n\r\n      var tileProvider = LEAFLET_PROVIDERS.get(this.props.tileProvider) || LEAFLET_PROVIDERS.get('OpenStreetMap');\r\n      this._tileLayer = L.tileLayer(tileProvider.urlTemplate, tileProvider).addTo(this.map);\r\n    }\r\n  },\r\n\r\n  findMarker (id) {\r\n    return this.markers.find(function (marker) {\r\n      return marker.id == id;\r\n    });\r\n  },\r\n\r\n  addMarkerToMap (marker, group) {\r\n    marker.remove();\r\n\r\n    if (group) {\r\n      if (!this.overlays[group]) {\r\n        if (this.props.enableClustering) {\r\n          this.overlays[group] = L.markerClusterGroup().addTo(this.map);\r\n        } else {\r\n          this.overlays[group] = L.layerGroup().addTo(this.map);\r\n        }\r\n\r\n        if (this.layerControl) {\r\n          this.layerControl.addOverlay(this.overlays[group], group);\r\n        }\r\n      }\r\n      \r\n      marker.addTo(this.overlays[group]);\r\n    } else {\r\n      if (this.props.enableClustering) {\r\n        this._markerCluster = this._markerCluster || L.markerClusterGroup().addTo(this.map);\r\n        this._markerCluster.addLayer(marker);\r\n      } else {\r\n        marker.addTo(this.map);\r\n      }\r\n    }\r\n  },\r\n\r\n  addMarker (options) {\r\n    const markerOptions = {};\r\n    if (options.draggable) {\r\n      markerOptions.draggable = true;\r\n    }\r\n\r\n    if (options.iconUrl) {\r\n      markerOptions.icon = new L.Icon({ iconUrl: options.iconUrl });\r\n    } else if (options.icon) {\r\n      markerOptions.icon = new L.divIcon({\r\n        className: '',\r\n        iconSize: [25, 30],\r\n        iconAnchor: [12, 30],\r\n        tooltipAnchor: [16 , -15],\r\n        popupAnchor: [1, -25],\r\n        html: `<div class=\"leaflet-marker-icon-custom\">\r\n          <i class=\"${options.icon}\">\r\n        </div>`,\r\n      });\r\n      if (options.color) {\r\n        markerOptions.icon.options.className = 'leaflet-marker-icon-' + options.color;\r\n      }\r\n    } else {\r\n      markerOptions.icon = new L.Icon.Default();\r\n      if (options.color) {\r\n        markerOptions.icon.options.className = 'leaflet-marker-icon-' + options.color;\r\n      }\r\n    }\r\n\r\n    var marker = L.marker([options.latitude, options.longitude], markerOptions);\r\n\r\n    if (options.static) {\r\n      marker.static = true;\r\n    }\r\n\r\n    if (options.id) {\r\n      marker.id = options.id;\r\n    }\r\n\r\n    if (options.tooltip) {\r\n      marker.bindTooltip(options.tooltip);\r\n    }\r\n\r\n    if (options.popup) {\r\n      marker.bindPopup(options.popup);\r\n    }\r\n\r\n    marker.on('click', this.onMouseEvent.bind(this, 'marker'));\r\n    marker.on('dblclick', this.onMouseEvent.bind(this, 'marker'));\r\n    marker.on('move', this.onMoveEvent.bind(this, 'marker'));\r\n\r\n    this.markers.push(marker);\r\n\r\n    this.addMarkerToMap(marker, options.group);\r\n\r\n    return marker;\r\n  },\r\n\r\n  _removeAllMarkers () {\r\n    this.markers = this.markers.filter(marker => {\r\n      if (!marker.static) {\r\n        marker.remove().off();\r\n        return false;\r\n      }\r\n\r\n      return true;\r\n    });\r\n  },\r\n\r\n  _updateData () {\r\n    var center = this.map.getCenter();\r\n    var zoom = this.map.getZoom();\r\n\r\n    this.set({\r\n      latitude: center.lat,\r\n      longitude: center.lng,\r\n      zoom: zoom,\r\n    });\r\n  },\r\n\r\n  _toBooleanOrString (o, allowed) {\r\n    if (allowed && allowed.includes(o)) {\r\n      return o;\r\n    }\r\n\r\n    return o && o != 'false' && o != '0';\r\n  },\r\n\r\n  onEvent (e) {\r\n    this._updateData();\r\n    this.dispatchEvent(e.type, null, this.data);\r\n  },\r\n\r\n  onMoveEvent (prefix, e) {\r\n    this.dispatchEvent(prefix + e.type, null, {\r\n      latitude: e.latlng.lat,\r\n      longitude: e.latlng.lng,\r\n      oldLatitude: e.oldLatLng.lat,\r\n      oldLongitude: e.oldLatLng.lng,\r\n    });\r\n  },\r\n\r\n  onMouseEvent (prefix, e) {\r\n    this.dispatchEvent(prefix + e.type, null, {\r\n      id: e.target.id,\r\n      latitude: e.latlng.lat,\r\n      longitude: e.latlng.lng,\r\n      altKey: e.originalEvent.altKey,\r\n      ctrlKey: e.originalEvent.ctrlKey,\r\n      metaKey: e.originalEvent.metaKey,\r\n      shiftKey: e.originalEvent.shiftKey,\r\n      pageX: e.originalEvent.pageX,\r\n      pageY: e.originalEvent.pageY,\r\n      x: e.originalEvent.x || e.originalEvent.clientX,\r\n      y: e.originalEvent.y || e.originalEvent.clientY,\r\n    });\r\n  },\r\n\r\n});\r\n","dmx.Component('leaflet-marker', {\r\n\r\n  initialData: {\r\n    latitude: 0,\r\n    longitude: 0,\r\n  },\r\n\r\n  attributes: {\r\n    latitude: {\r\n      type: Number,\r\n      default: 0,\r\n    },\r\n\r\n    longitude: {\r\n      type: Number,\r\n      default: 0,\r\n    },\r\n\r\n    tooltip: {\r\n      type: String,\r\n      default: null,\r\n    },\r\n\r\n    popup: {\r\n      type: String,\r\n      default: null,\r\n    },\r\n\r\n    group: {\r\n      type: String,\r\n      default: null,\r\n    },\r\n\r\n    draggable: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n\r\n    icon: { // icon font\r\n      type: String,\r\n      default: null,\r\n    },\r\n\r\n    iconUrl: {\r\n      type: String,\r\n      default: null,\r\n    },\r\n\r\n    color: {\r\n      type: String,\r\n      default: 'blue',\r\n      enum: ['blue', 'pink', 'darkblue', 'lila', 'magenta', 'red', 'orange', 'brown', 'green', 'mint'],\r\n    },\r\n  },\r\n\r\n  events: {\r\n    click: Event,\r\n    dblclick: Event,\r\n    move: Event,\r\n  },\r\n\r\n  render: false,\r\n\r\n  init () {\r\n    this._clickHandler = this._clickHandler.bind(this);\r\n    this._moveHandler = this._moveHandler.bind(this);\r\n\r\n    const markerOptions = {};\r\n    if (this.props.draggable) {\r\n      markerOptions.draggable = true;\r\n    }\r\n\r\n    if (this.props.iconUrl) {\r\n      markerOptions.icon = new L.Icon({ iconUrl: this.props.iconUrl });\r\n    } else if (this.props.icon) {\r\n      markerOptions.icon = new L.divIcon({\r\n        className: '',\r\n        iconSize: [25, 30],\r\n        iconAnchor: [12, 30],\r\n        tooltipAnchor: [16 , -15],\r\n        popupAnchor: [1, -25],\r\n        html: `<div class=\"leaflet-marker-icon-custom\">\r\n          <i class=\"${this.props.icon}\">\r\n        </div>`,\r\n      });\r\n      if (this.props.color) {\r\n        markerOptions.icon.options.className = 'leaflet-marker-icon-' + this.props.color;\r\n      }\r\n    } else {\r\n      markerOptions.icon = new L.Icon.Default();\r\n      if (this.props.color) {\r\n        markerOptions.icon.options.className = 'leaflet-marker-icon-' + this.props.color;\r\n      }\r\n    }\r\n\r\n    this._marker = L.marker([this.props.latitude || 0, this.props.longitude || 0], markerOptions);\r\n    this._marker.id = this.name;\r\n    this._marker.static = true;\r\n\r\n    this._marker.on('click', this._clickHandler);\r\n    this._marker.on('dblclick', this._clickHandler);\r\n    this._marker.on('move', this._moveHandler);\r\n\r\n    if (this.props.tooltip) {\r\n      this._marker.bindTooltip(this.props.tooltip);\r\n      this._hasTooltip = true;\r\n    }\r\n\r\n    if (this.props.popup) {\r\n      this._marker.bindPopup(this.props.popup);\r\n      this._hasPopup = true;\r\n    }\r\n\r\n    this._updateData();\r\n  },\r\n\r\n  performUpdate (updatedProps) {\r\n    if (updatedProps.has('latitude') || updatedProps.has('longitude')) {\r\n      this._marker.setLatLng([this.props.latitude || 0, this.props.longitude || 0]);\r\n    }\r\n\r\n    if (updatedProps.has('tooltip')) {\r\n      if (this._hasTooltip) {\r\n        this._marker.unbindTooltip();\r\n        this._hasTooltip = false;\r\n      } else {\r\n        this._marker.bindTooltip(this.props.tooltip);\r\n        this._hasTooltip = true;\r\n      }\r\n    }\r\n\r\n    if (updatedProps.has('popup')) {\r\n      if (this._hasPopup) {\r\n        this._marker.unbindPopup();\r\n        this._hasPopup = false;\r\n      } else {\r\n        this._marker.bindPopup(this.props.popup);\r\n        this._hasPopup = true;\r\n      }\r\n    }\r\n\r\n    if (updatedProps.has('draggable')) {\r\n      this._marker.dragging[this.props.draggable ? 'enable' : 'disable']();\r\n    }\r\n\r\n    if (updatedProps.has('iconUrl')) {\r\n      this._marker.setIcon(this.props.iconUrl ? { iconUrl: this.props.iconUrl } : new L.Icon.Default());\r\n    }\r\n\r\n    if (updatedProps.has('icon')) {\r\n      this._marker.setIcon(this.props.icon ? new L.divIcon({\r\n        className: '',\r\n        iconSize: [25, 30],\r\n        iconAnchor: [12, 30],\r\n        tooltipAnchor: [16 , -15],\r\n        popupAnchor: [1, -25],\r\n        html: `<div class=\"leaflet-marker-icon-custom\">\r\n          <i class=\"${this.props.icon}\">\r\n        </div>`,\r\n      }) : new L.Icon.Default());\r\n    }\r\n\r\n    this._updateData();\r\n  },\r\n\r\n  destroy () {\r\n    this._marker.remove();\r\n\r\n    if (this._hasTooltip) {\r\n      this._marker.unbindTooltip();\r\n    }\r\n\r\n    if (this._hasPopup) {\r\n      this._marker.unbindPopup();\r\n    }\r\n\r\n    this._marker.clearAllEventListeners();\r\n  },\r\n\r\n  _updateData () {\r\n    var coor = this._marker.getLatLng();\r\n    this.set({\r\n      latitude: coor && coor.lat,\r\n      longitude: coor && coor.lng,\r\n    });\r\n  },\r\n\r\n  _moveHandler (e) {\r\n    this._updateData();\r\n    this.dispatchEvent(e.type, null, {\r\n      latitude: e.latlng && e.latlng.lat,\r\n      longitude: e.latlng && e.latlng.lng,\r\n      oldLatitude: e.oldLatLng && e.oldLatLng.lat,\r\n      oldLongitude: e.oldLatLng && e.oldLatLng.lng,\r\n    });\r\n  },\r\n\r\n  _clickHandler (e) {\r\n    this.dispatchEvent(e.type, null, {\r\n      id: e.target.id,\r\n      latitude: e.latlng && e.latlng.lat,\r\n      longitude: e.latlng && e.latlng.lng,\r\n      altKey: e.originalEvent.altKey,\r\n      ctrlKey: e.originalEvent.ctrlKey,\r\n      metaKey: e.originalEvent.metaKey,\r\n      shiftKey: e.originalEvent.shiftKey,\r\n      pageX: e.originalEvent.pageX,\r\n      pageY: e.originalEvent.pageY,\r\n      x: e.originalEvent.x || e.originalEvent.clientX,\r\n      y: e.originalEvent.y || e.originalEvent.clientY,\r\n    });\r\n  },\r\n\r\n});\r\n"]}