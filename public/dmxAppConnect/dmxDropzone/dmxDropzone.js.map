{"version":3,"sources":["components/dropzone.js"],"names":["dmx","Component","extends","initialData","file","files","lastError","attributes","accept","type","String","default","required","Boolean","message","thumbs","thumbsWidth","Number","thumbsHeight","imageMaxWidth","imageMaxHeight","imageType","enum","imageQuality","methods","remove","id","this","_remove","reset","_reset","init","node","_clickHandler","bind","_dragoverHandler","_dragenterHandler","_dragleaveHandler","_dropHandler","_changeHandler","_resetHandler","_imageTypes","png","jpeg","webp","_imageExtensions","_form","form","_cnt","render","_dropzoneElement","document","createElement","attr","name","setAttribute","value","$parse","classList","add","Object","defineProperties","willValidate","get","set","dmxExtraData","$node","Array","isArray","data","map","join","multiple","toggleAttribute","props","disabled","setCustomValidity","_messageElement","className","innerHTML","append","addEventListener","dom","replace","dmxExtraElements","push","performUpdate","updatedProps","has","_updateMessage","destroy","removeEventListener","index","indexOf","splice","_validate","validate","dirty","invalid","validity","valid","validationMessage","validateReset","nextTick","dispatchEvent","length","_addItems","items","i","entry","webkitGetAsEntry","isFile","_addFile","getAsFile","isDirectory","_addDirectory","path","createReader","readEntries","entries","fullPath","_addFiles","resized","_resizeImage","then","_id","self","info","date","lastModified","Date","lastModifiedDate","toISOString","size","dataUrl","_reader","_dataUrl","fileUtils","blobToDataURL","f","catch","error","console","_createThumb","includes","FileReader","onload","result","readAsDataURL","findIndex","thumb","_thumb","URL","revokeObjectURL","_objectURL","slice","style","width","height","title","createObjectURL","backgroundImage","event","preventDefault","stopPropagation","filename","textContent","filesize","_formatBytes","Promise","resolve","startsWith","blobUrl","img","Image","src","onerror","ratio","needResize","newType","canvas","ctx","getContext","drawImage","toBlob","blob","newName","newFile","File","undefined","bytes","toFixed","click","target","dataTransfer"],"mappings":"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","file":"dmxDropzone.js","sourcesContent":["dmx.Component('dropzone', {\r\n\r\n  extends: 'form-element',\r\n\r\n  initialData: {\r\n    file: null,\r\n    files: [],\r\n    lastError: '',\r\n  },\r\n\r\n  attributes: {\r\n    accept: {\r\n      type: String,\r\n      default: '',\r\n    },\r\n\r\n    required: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n\r\n    message: {\r\n      type: String,\r\n      default: 'Drop files here or click to browse.',\r\n    },\r\n\r\n    thumbs: {\r\n      type: Boolean,\r\n      default: true,\r\n    },\r\n\r\n    thumbsWidth: {\r\n      type: Number,\r\n      default: 100,\r\n    },\r\n\r\n    thumbsHeight: {\r\n      type: Number,\r\n      default: 100,\r\n    },\r\n\r\n    imageMaxWidth: {\r\n      type: Number,\r\n      default: null,\r\n    },\r\n\r\n    imageMaxHeight: {\r\n      type: Number,\r\n      default: null,\r\n    },\r\n\r\n    imageType: {\r\n      type: String,\r\n      default: null,\r\n      enum: ['png', 'jpeg', 'webp'],\r\n    },\r\n\r\n    imageQuality: {\r\n      type: Number,\r\n      default: null,\r\n    },\r\n  },\r\n\r\n  methods: {\r\n    remove (id) {\r\n      this._remove(id);\r\n    },\r\n\r\n    reset () {\r\n      this._reset();\r\n    },\r\n  },\r\n\r\n  init (node) {\r\n    this._clickHandler = this._clickHandler.bind(this);\r\n    this._dragoverHandler = this._dragoverHandler.bind(this);\r\n    this._dragenterHandler = this._dragenterHandler.bind(this);\r\n    this._dragleaveHandler = this._dragleaveHandler.bind(this);\r\n    this._dropHandler = this._dropHandler.bind(this);\r\n    this._changeHandler = this._changeHandler.bind(this);\r\n    this._resetHandler = this._resetHandler.bind(this);\r\n\r\n    this._imageTypes = {\r\n      png: 'image/png',\r\n      jpeg: 'image/jpeg',\r\n      webp: 'image/webp',\r\n      'image/png': 'image/png',\r\n      'image/jpeg': 'image/jpeg',\r\n      'image/webp': 'image/webp',\r\n    };\r\n\r\n    this._imageExtensions = {\r\n      'image/png': 'png',\r\n      'image/jpeg': 'jpg',\r\n      'image/webp': 'webp',\r\n    };\r\n\r\n    this._form = node.form;\r\n    this._cnt = 0;\r\n  },\r\n\r\n  render (node) {\r\n    this._dropzoneElement = document.createElement('div');\r\n    for (let attr of node.attributes) {\r\n      //if (attr.name.startsWith('dmx-')) continue;\r\n      if (attr.name == 'is') continue;\r\n      this._dropzoneElement.setAttribute(attr.name, attr.value);\r\n    }\r\n    this.$parse(this._dropzoneElement);\r\n    this._dropzoneElement.classList.add('dmxDropzone');\r\n\r\n    Object.defineProperties(this._dropzoneElement, {\r\n      willValidate: {\r\n        get: () => true,\r\n        set: () => {},\r\n      },\r\n      files: {\r\n        get: () => {\r\n          const files = this._form.dmxExtraData[this.$node.name];\r\n          if (Array.isArray(files)) return files;\r\n          return files ? [files] : [];\r\n        },\r\n        set: () => {},\r\n      },\r\n      value: {\r\n        get: () => this.data.file ? this.data.file.name : this.data.files.map(file => file.name).join(', '),\r\n        set: () => {},\r\n      },\r\n    });\r\n\r\n    this._dropzoneElement.type = 'file';\r\n    this._dropzoneElement.multiple = node.multiple;\r\n    this._dropzoneElement.toggleAttribute('required', this.props.required);\r\n    this._dropzoneElement.accept = this.props.accept;\r\n    this._dropzoneElement.name = node.name;\r\n    this._dropzoneElement.disabled = node.disabled;\r\n    this._dropzoneElement.setCustomValidity = message => {\r\n      this.set('isinvalid', message != '');\r\n      this.set('validityMessage', message || '');\r\n    };\r\n\r\n    this._messageElement = document.createElement('div');\r\n    this._messageElement.className = 'dmxDropzoneMessage';\r\n    this._messageElement.innerHTML = this.props.message;\r\n\r\n    this._dropzoneElement.append(this._messageElement);\r\n\r\n    this._dropzoneElement.addEventListener('click', this._clickHandler);\r\n    this._dropzoneElement.addEventListener('dragover', this._dragoverHandler);\r\n    this._dropzoneElement.addEventListener('dragenter', this._dragenterHandler);\r\n    this._dropzoneElement.addEventListener('dragleave', this._dragleaveHandler);\r\n    this._dropzoneElement.addEventListener('drop', this._dropHandler);\r\n\r\n    node.addEventListener('change', this._changeHandler);\r\n    node.accept = this.props.accept;\r\n\r\n    dmx.dom.replace(node, this._dropzoneElement);\r\n\r\n    if (this._form) {\r\n      if (Array.isArray(this._form.dmxExtraElements)) {\r\n        this._form.dmxExtraElements.push(this._dropzoneElement);\r\n      }\r\n      this._form.addEventListener('reset', this._resetHandler);\r\n    }\r\n  },\r\n\r\n  performUpdate (updatedProps) {\r\n    if (updatedProps.has('accept')) {\r\n      this.$node.accept = this.props.accept;\r\n      this._dropzoneElement.accept = this.props.accept;\r\n    }\r\n\r\n    if (updatedProps.has('required')) {\r\n      this.$node.required = this.props.required;\r\n      this._dropzoneElement.toggleAttribute('required', this.props.required);\r\n    }\r\n\r\n    if (updatedProps.has('message')) {\r\n      this._updateMessage();\r\n    }\r\n  },\r\n\r\n  destroy () {\r\n    this._dropzoneElement.removeEventListener('click', this._clickHandler);\r\n    this._dropzoneElement.removeEventListener('dragover', this._dragoverHandler);\r\n    this._dropzoneElement.removeEventListener('dragenter', this._dragenterHandler);\r\n    this._dropzoneElement.removeEventListener('dragleave', this._dragleaveHandler);\r\n    this._dropzoneElement.removeEventListener('drop', this._dropHandler);\r\n\r\n    this.$node.removeEventListener('change', this._changeHandler);\r\n\r\n    if (this._form) {\r\n      if (Array.isArray(this._form.dmxExtraElements)) {\r\n        const index = this._form.dmxExtraElements.indexOf(this._dropzoneElement);\r\n        if (index != -1) this._form.dmxExtraElements.splice(index, 1);\r\n      }\r\n      this._form.removeEventListener('reset', this._resetHandler);\r\n    }\r\n\r\n    dmx.dom.replace(this._dropzoneElement, this.$node);\r\n  },\r\n\r\n  _validate () {\r\n    dmx.validate(this._dropzoneElement);\r\n\r\n    if (this.$node.dirty) {\r\n      this.set({\r\n        invalid: !this.$node.validity.valid,\r\n        validationMessage: this.$node.validationMessage,\r\n      });\r\n    }\r\n  },\r\n\r\n  _reset () {\r\n    dmx.validateReset(this._dropzoneElement);\r\n    this._dropzoneElement.dirty = false;\r\n    this.$node.dirty = false;\r\n    this.set({\r\n      invalid: false,\r\n      validationMessage: '',\r\n    });\r\n    this._remove();\r\n    dmx.nextTick(() => this.dispatchEvent(\"updated\"));\r\n  },\r\n\r\n  _updateMessage () {\r\n    let message = this.props.message;\r\n\r\n    if (this.data.files.length) {\r\n      message += ` (${this.data.files.length} files)`;\r\n    } else if (this.data.file) {\r\n      message += ` (${this.data.file.name})`;\r\n    }\r\n\r\n    this._messageElement.innerHTML = message;\r\n  },\r\n\r\n  _addItems (items) {\r\n    for (let i = 0; i < items.length; i++) {\r\n      const entry = items[i].webkitGetAsEntry();\r\n\r\n      if (entry.isFile) {\r\n        this._addFile(items[i].getAsFile());\r\n      } else if (entry.isDirectory) {\r\n        this._addDirectory(entry);\r\n      }\r\n    }\r\n  },\r\n\r\n  _addDirectory (entry, path = '') {\r\n    const reader = entry.createReader();\r\n\r\n    reader.readEntries(entries => {\r\n      for (let i = 0; i < entries.length; i++) {\r\n        const entry = entries[i];\r\n\r\n        if (entry.isFile) {\r\n          entry.file(file => {\r\n            file.fullPath = path + file.name;\r\n            this._addFile(file);\r\n          });\r\n        } else if (entry.isDirectory) {\r\n          this._addDirectory(entry, path + entry.name + '/');\r\n        }\r\n      }\r\n    });\r\n  },\r\n\r\n  _addFiles (files) {\r\n    for (let i = 0; i < files.length; i++) {\r\n      this._addFile(files[i]);\r\n    }\r\n  },\r\n\r\n  _addFile (file) {\r\n    if ((this.props.imageMaxWidth || this.props.imageMaxHeight || this.props.imageType) && !file.resized) {\r\n      this._resizeImage(file).then(file => {\r\n        this._addFile(file);\r\n      });\r\n      return;\r\n    }\r\n\r\n    if (this.$node.multiple) {\r\n      this._form.dmxExtraData[this.$node.name] = this._form.dmxExtraData[this.$node.name] || [];\r\n      this._form.dmxExtraData[this.$node.name].push(file);\r\n    } else {\r\n      this._remove();\r\n      this._form.dmxExtraData[this.$node.name] = file;\r\n    }\r\n\r\n    file._id = ++this._cnt;\r\n\r\n    const self = this;\r\n    const info = {\r\n      id: file._id,\r\n      date: (file.lastModified ? new Date(file.lastModified) : file.lastModifiedDate).toISOString(),\r\n      name: file.name,\r\n      size: file.size,\r\n      type: file.type,\r\n      get dataUrl () {\r\n        if (!file._reader && !file._dataUrl) {\r\n          dmx.fileUtils.blobToDataURL(file).then(dataUrl => {\r\n            file._dataUrl = dataUrl;\r\n            if (self.$node.multiple) {\r\n              self.set('files', self.data.files.map(f => f.id == info.id ? {...f, dataUrl} : f));\r\n            } else {\r\n              self.set('file', {...info, dataUrl});\r\n            }\r\n          }).catch(error => {\r\n            console.error(error);\r\n          });\r\n        }\r\n\r\n        return null;\r\n      },\r\n    };\r\n\r\n    if (this.props.thumbs) {\r\n      this._createThumb(file);\r\n    }\r\n\r\n    if (file.type.includes('image/') && !file._reader) {\r\n      file._reader = new FileReader();\r\n\r\n      file._reader.onload = () => {\r\n        //info.dataUrl = file._reader.result;\r\n        if (this.$node.multiple) {\r\n          this.set('files', this.data.files.map(f => f.id == info.id ? {...f, dataUrl: file._reader.result} : f));\r\n        } else {\r\n          this.set('file', {...info, dataUrl: file._reader.result});\r\n        }\r\n      };\r\n\r\n      file._reader.readAsDataURL(file);\r\n    }\r\n\r\n    if (this.$node.multiple) {\r\n      this.set('files', [...this.data.files, info]);\r\n    } else {\r\n      this.set('file', info);\r\n    }\r\n\r\n    if (this._dropzoneElement.dirty) {\r\n      this._validate();\r\n    }\r\n  },\r\n\r\n  _remove (id) {\r\n    if (this.$node.multiple) {\r\n      if (!id) {\r\n        if (Array.isArray(this._form.dmxExtraData[this.$node.name])) {\r\n          for (let file of this._form.dmxExtraData[this.$node.name]) {\r\n            const thumb = file._thumb;\r\n            if (thumb) {\r\n              thumb.remove();\r\n              URL.revokeObjectURL(thumb._objectURL);\r\n            }\r\n          }\r\n        }\r\n        delete this._form.dmxExtraData[this.$node.name];\r\n        this.set('files', []);\r\n    } else {\r\n        const index = this.data.files.findIndex(file => file.id == id);\r\n\r\n        if (index != -1) {\r\n          const thumb = this._form.dmxExtraData[this.$node.name][index]._thumb;\r\n          if (thumb) {\r\n            thumb.remove();\r\n            URL.revokeObjectURL(thumb._objectURL);\r\n          }\r\n          this._form.dmxExtraData[this.$node.name].splice(index, 1);\r\n          this.set('files', [...this.data.files.slice(0, index), ...this.data.files.slice(index + 1)]);\r\n        }\r\n      }\r\n    } else if (this.data.file) {\r\n      const thumb = this._form.dmxExtraData[this.$node.name]._thumb;\r\n      if (thumb) {\r\n        thumb.remove();\r\n        URL.revokeObjectURL(thumb._objectURL);\r\n      }\r\n      delete this._form.dmxExtraData[this.$node.name];\r\n      this.set('file', null);\r\n    }\r\n\r\n    if (this._dropzoneElement.dirty) {\r\n      this._validate();\r\n    }\r\n  },\r\n\r\n  _createThumb (file) {\r\n    const thumb = document.createElement('div');\r\n    thumb.id = 'dmxDropzoneThumb' + file._id;\r\n    thumb.className = 'dmxDropzoneThumb';\r\n    thumb.style.width = this.props.thumbsWidth + 'px';\r\n    thumb.style.height = this.props.thumbsHeight + 'px';\r\n    thumb.title = file.name;\r\n    thumb._objectURL = URL.createObjectURL(file);\r\n    thumb.style.backgroundImage = `url(${thumb._objectURL})`;\r\n    thumb.addEventListener('click', event => {\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n      this._remove(file._id);\r\n    });\r\n\r\n    const filename = document.createElement('div');\r\n    filename.className = 'dmxDropzoneFilename';\r\n    filename.textContent = file.name;\r\n    thumb.append(filename);\r\n\r\n    const filesize = document.createElement('div');\r\n    filesize.className = 'dmxDropzoneFilesize';\r\n    filesize.textContent = this._formatBytes(file.size);\r\n    thumb.append(filesize);\r\n\r\n    file._thumb = thumb;\r\n\r\n    this._dropzoneElement.append(thumb);\r\n  },\r\n\r\n  _resizeImage (file) {\r\n    file.resized = true;\r\n\r\n    return new Promise(resolve => {\r\n      if (!file.type.startsWith('image/')) {\r\n        resolve(file);\r\n        return;\r\n      }\r\n\r\n      const blobUrl = URL.createObjectURL(file);\r\n      const img = new Image();\r\n      img.src = blobUrl;\r\n      img.onerror = () => URL.revokeObjectURL(blobUrl);\r\n      img.onload = () => {\r\n        URL.revokeObjectURL(blobUrl);\r\n\r\n        const { imageMaxWidth, imageMaxHeight, imageType, imageQuality } = this.props;\r\n\r\n        let width = img.width;\r\n        let height = img.height;\r\n        let ratio = width / height;\r\n        let needResize = false;\r\n\r\n        if (imageMaxWidth && width > imageMaxWidth) {\r\n          width = imageMaxWidth;\r\n          height = ~~(width / ratio);\r\n          needResize = true;\r\n        }\r\n\r\n        if (imageMaxHeight && height > imageMaxHeight) {\r\n          height = imageMaxHeight;\r\n          width = ~~(height * ratio);\r\n          needResize = true;\r\n        }\r\n\r\n        const newType = imageType ? this._imageTypes[imageType] : file.type;\r\n\r\n        if (newType !== file.type || needResize) {\r\n          const canvas = document.createElement('canvas');\r\n          const ctx = canvas.getContext('2d');\r\n\r\n          canvas.width = width;\r\n          canvas.height = height;\r\n\r\n          ctx.drawImage(img, 0, 0, width, height);\r\n\r\n          canvas.toBlob(blob => {\r\n            if (blob == null) {\r\n              return console.error('Could not resize image!');\r\n            }\r\n            const newName = file.name.replace(/\\.\\w+$/, '.' + this._imageExtensions[blob.type]);\r\n            const newFile = new File([blob], newName, { type: blob.type });\r\n            resolve(newFile);\r\n          }, newType, imageQuality ? imageQuality / 100 : undefined);\r\n        } else {\r\n          resolve(file);\r\n        }\r\n      };\r\n    });\r\n  },\r\n\r\n  _formatBytes (bytes) {\r\n    const units = ['B', 'KB', 'MB', 'GB', 'TB'];\r\n    let i = 0;\r\n\r\n    while (bytes >= 1000) {\r\n      bytes /= 1000;\r\n      i++;\r\n    }\r\n\r\n    return bytes.toFixed(1) + units[i];\r\n  },\r\n\r\n  _clickHandler (event) {\r\n    this.$node.click();\r\n  },\r\n\r\n  _changeHandler (event) {\r\n    this._addFiles(event.target.files);\r\n    this.$node.value = '';\r\n    this.$node.type = '';\r\n    this.$node.type = 'file';\r\n    if (event) this.dispatchEvent('changed');\r\n    dmx.nextTick(() => this.dispatchEvent(\"updated\"));\r\n  },\r\n\r\n  _dragoverHandler (event) {\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n  },\r\n\r\n  _dragenterHandler (event) {\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n\r\n    this._dropzoneElement.classList.add('dmxDropzoneHover');\r\n  },\r\n\r\n  _dragleaveHandler (event) {\r\n    this._dropzoneElement.classList.remove('dmxDropzoneHover');\r\n  },\r\n\r\n  _dropHandler (event) {\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n\r\n    this._dropzoneElement.classList.remove('dmxDropzoneHover');\r\n\r\n    if (!event.dataTransfer.files.length) {\r\n      return;\r\n    }\r\n\r\n    if (event.dataTransfer.items.length && event.dataTransfer.items[0].webkitGetAsEntry) {\r\n      this._addItems(event.dataTransfer.items);\r\n    } else {\r\n      this._addFiles(event.dataTransfer.files);\r\n    }\r\n\r\n    this.dispatchEvent('change');\r\n  },\r\n\r\n  _resetHandler (event) {\r\n    this._reset();\r\n    this.dispatchEvent('changed');\r\n  },\r\n\r\n});\r\n"]}